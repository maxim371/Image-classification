# -*- coding: utf-8 -*-
"""Image Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eHe0mIpVR3eljUaQTw5e_F4Y09zsZiiC
"""

!pip install numpy==1.18.5
!pip install matplotlib==3.2.2
!pip install pyngrok==4.1.1
!pip install bing_image_downloader==1.0.4
!pip install scikit_image==0.16.2
!pip install scikit-learn==0.22.2.post1
!pip install Pillow==8.0.1
!pip install streamlit==0.70.0

# Commented out IPython magic to ensure Python compatibility.
!pip install ipython-autotime
# %load_ext autotime

# Data : Images
# 1. Download manually images from Google
# 2. Download dataset from Kaggle.com
# 3. Build Image Web Crawler
# 4. Use python libraries to scrape Images

!mkdir images

from bing_image_downloader import downloader
downloader.download("Pretty Sunflower",limit=30,output_dir='images',adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("rugby ball leather",limit=30,output_dir='images',adult_filter_off=True)

from bing_image_downloader import downloader
downloader.download("ice cream cone",limit=30,output_dir='images',adult_filter_off=True)

# How to convert matrix to vector? - Flatten

# Preprocessing

import os 
import matplotlib.pyplot as plt
import numpy as np 
from skimage.io import imread 
from skimage.transform import resize 

target = []
images = []
flat_data = []

DATADIR = '/content/images'
CATEGORIES = ['Pretty Sunflower', 'rugby ball leather', 'ice cream cone']

for category in CATEGORIES:
  class_num = CATEGORIES.index(category) #Label Encoding the values
  path = os.path.join(DATADIR,category) # Create path to use all the images
  for img in os.listdir(path):
    img_array = imread(os.path.join(path,img))
    #plt.imshow(img_array) #show one of the images
    img_resized = resize(img_array,(150,150,3))
    flat_data.append(img_resized.flatten())
    images.append(img_resized)
    target.append(class_num)

flat_data = np.array(flat_data)
target = np.array(target)
images = np.array(images)

flat_data[0]

unique,count = np.unique(target,return_counts=True)
plt.bar(CATEGORIES,count)

# SPlit data into training and testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(flat_data,target,test_size=0.3,random_state=100)

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = [{'C':[1,10,100,1000],'kernel':['Linear']},
              {'C':[1,10,100,1000],'gamma':[0.001,0.0001],'kernel':['rbf']},]

svc = svm.SVC(probability=True)
clf = GridSearchCV(svc,param_grid)
clf.fit(x_train,y_train)

y_pred = clf.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score,confusion_matrix

accuracy_score(y_pred,y_test)

confusion_matrix(y_pred,y_test)

# Save the model using Pickle library
import pickle
pickle.dump(clf,open('img_model.p','wb'))

model = pickle.load(open('img_model.p','rb'))

#Testing a new image
flat_data = []
url = input('Enter your URL')
img = imread(url)
img_resized = resize(img,(150,150,3))
flat_data.append(img_resized.flatten())
flat_data = np.array(flat_data)
print(img.shape)
plt.imshow(img_resized)
y_out = model.predict(flat_data)
y_out = CATEGORIES[y_out[0]]
print(f' PREDICTED_OUTPUT: {y_out}')

from pyngrok import ngrok

# Deployment:
# 1. WebPage - html/css/js - flask/django
# 2. WebApp - streamlit/dash
# 3. Mobile App - kotlin/java

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# from skimage.io import imread
# from skimage.transform import resize
# import pickle 
# from PIL import Image 
# st.set_option('deprecation.showfileUploaderEncoding', False)
# st.title('Image Classifier using machine learning')
# st.text('Upload the Image')
# 
# model = pickle.load(open('img_model.p','rb'))
# 
# uploaded_file = st.file_uploader("Choose an Image...", type="jpg")
# if uploaded_file is not None:
#   img = Image.open(uploaded_file)
#   st.image(img,caption='Uploaded Image')
# 
#   if st.button('PREDICT'):
#     CATEGORIES = ['Pretty Sunflower', 'rugby ball leather', 'ice cream cone']
#     st.write('Result...')
#     flat_data=[]
#     img = np.array(img)
#     img_resized = resize(img,(150,150,3))
#     flat_data.append(img_resized.flatten())
#     flat_data = np.array(flat_data)
#     y_out = model.predict(flat_data)
#     y_out = CATEGORIES[y_out[0]]
#     st.title(f' PREDICTED OUTPUT: {y_out}')
#     q = model.predict_proba(flat_data)
#     for index, item in enumerate(CATEGORIES):
#       st.write(f'{item} : {q[0][index]*100}%')

!nohup streamlit run app.py &

url = ngrok.connect(port='8501')
url

